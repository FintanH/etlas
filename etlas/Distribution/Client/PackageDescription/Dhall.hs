module Distribution.Client.PackageDescription.Dhall where

import qualified Data.ByteString.Char8 as BS.Char
import Data.Function ( (&) )
import qualified Data.Text.IO as StrictText

import qualified Dhall
import DhallToCabal (dhallToCabal)

import Distribution.Verbosity
import Distribution.PackageDescription
import Distribution.PackageDescription.PrettyPrint (showGenericPackageDescription)
import Distribution.PackageDescription.Parsec (parseGenericPackageDescriptionMaybe)
import Distribution.Simple.Utils (die')

import Lens.Micro ( set )

import System.Directory (doesFileExist)
import System.FilePath (takeDirectory)

import Control.Monad    (unless)

readGenericPackageDescription :: Verbosity -> FilePath -> IO GenericPackageDescription
readGenericPackageDescription verbosity dhallFilePath = do
  exists <- doesFileExist dhallFilePath
  unless exists $
    die' verbosity $
      "Error Parsing: file \"" ++ dhallFilePath ++ "\" doesn't exist. Cannot continue."
  
  let settings = Dhall.defaultInputSettings
        & set Dhall.rootDirectory ( takeDirectory dhallFilePath )
        & set Dhall.sourceName dhallFilePath

  source <- StrictText.readFile dhallFilePath

  genPkgDesc <- explaining $ dhallToCabal settings source
  -- TODO: It should use directly the `GenericPackageDescription` generated by dhall.
  --       However, it actually has not the `condTreeConstraints` field informed and
  --       this make it unusable to be consumed by etlas/cabal
  let bs = BS.Char.pack $ showGenericPackageDescription genPkgDesc
      result = parseGenericPackageDescriptionMaybe bs

  case result of
      Nothing -> die' verbosity $ "Failing parsing \"" ++ dhallFilePath ++ "\"."
      Just x  -> return x
  
  where
    explaining = if verbosity >= verbose then Dhall.detailed else id
 
